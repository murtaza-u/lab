// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/proxy.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxySvcClient is the client API for ProxySvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxySvcClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (ProxySvc_StreamClient, error)
}

type proxySvcClient struct {
	cc grpc.ClientConnInterface
}

func NewProxySvcClient(cc grpc.ClientConnInterface) ProxySvcClient {
	return &proxySvcClient{cc}
}

func (c *proxySvcClient) Stream(ctx context.Context, opts ...grpc.CallOption) (ProxySvc_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProxySvc_ServiceDesc.Streams[0], "/ProxySvc/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxySvcStreamClient{stream}
	return x, nil
}

type ProxySvc_StreamClient interface {
	Send(*Packet) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type proxySvcStreamClient struct {
	grpc.ClientStream
}

func (x *proxySvcStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxySvcStreamClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxySvcServer is the server API for ProxySvc service.
// All implementations must embed UnimplementedProxySvcServer
// for forward compatibility
type ProxySvcServer interface {
	Stream(ProxySvc_StreamServer) error
	mustEmbedUnimplementedProxySvcServer()
}

// UnimplementedProxySvcServer must be embedded to have forward compatible implementations.
type UnimplementedProxySvcServer struct {
}

func (UnimplementedProxySvcServer) Stream(ProxySvc_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedProxySvcServer) mustEmbedUnimplementedProxySvcServer() {}

// UnsafeProxySvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxySvcServer will
// result in compilation errors.
type UnsafeProxySvcServer interface {
	mustEmbedUnimplementedProxySvcServer()
}

func RegisterProxySvcServer(s grpc.ServiceRegistrar, srv ProxySvcServer) {
	s.RegisterService(&ProxySvc_ServiceDesc, srv)
}

func _ProxySvc_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxySvcServer).Stream(&proxySvcStreamServer{stream})
}

type ProxySvc_StreamServer interface {
	SendAndClose(*Void) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type proxySvcStreamServer struct {
	grpc.ServerStream
}

func (x *proxySvcStreamServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxySvcStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxySvc_ServiceDesc is the grpc.ServiceDesc for ProxySvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxySvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProxySvc",
	HandlerType: (*ProxySvcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _ProxySvc_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/proxy.proto",
}
