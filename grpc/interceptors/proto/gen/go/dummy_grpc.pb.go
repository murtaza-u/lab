// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: proto/dummy.proto

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DummyClient is the client API for Dummy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyClient interface {
	UnaryPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	ServerStreamPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (Dummy_ServerStreamPingClient, error)
	ClientStreamPing(ctx context.Context, opts ...grpc.CallOption) (Dummy_ClientStreamPingClient, error)
}

type dummyClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyClient(cc grpc.ClientConnInterface) DummyClient {
	return &dummyClient{cc}
}

func (c *dummyClient) UnaryPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Dummy/UnaryPing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyClient) ServerStreamPing(ctx context.Context, in *Void, opts ...grpc.CallOption) (Dummy_ServerStreamPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dummy_ServiceDesc.Streams[0], "/Dummy/ServerStreamPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyServerStreamPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dummy_ServerStreamPingClient interface {
	Recv() (*Void, error)
	grpc.ClientStream
}

type dummyServerStreamPingClient struct {
	grpc.ClientStream
}

func (x *dummyServerStreamPingClient) Recv() (*Void, error) {
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dummyClient) ClientStreamPing(ctx context.Context, opts ...grpc.CallOption) (Dummy_ClientStreamPingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dummy_ServiceDesc.Streams[1], "/Dummy/ClientStreamPing", opts...)
	if err != nil {
		return nil, err
	}
	x := &dummyClientStreamPingClient{stream}
	return x, nil
}

type Dummy_ClientStreamPingClient interface {
	Send(*Void) error
	CloseAndRecv() (*Void, error)
	grpc.ClientStream
}

type dummyClientStreamPingClient struct {
	grpc.ClientStream
}

func (x *dummyClientStreamPingClient) Send(m *Void) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dummyClientStreamPingClient) CloseAndRecv() (*Void, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Void)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DummyServer is the server API for Dummy service.
// All implementations must embed UnimplementedDummyServer
// for forward compatibility
type DummyServer interface {
	UnaryPing(context.Context, *Void) (*Void, error)
	ServerStreamPing(*Void, Dummy_ServerStreamPingServer) error
	ClientStreamPing(Dummy_ClientStreamPingServer) error
	mustEmbedUnimplementedDummyServer()
}

// UnimplementedDummyServer must be embedded to have forward compatible implementations.
type UnimplementedDummyServer struct {
}

func (UnimplementedDummyServer) UnaryPing(context.Context, *Void) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryPing not implemented")
}
func (UnimplementedDummyServer) ServerStreamPing(*Void, Dummy_ServerStreamPingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamPing not implemented")
}
func (UnimplementedDummyServer) ClientStreamPing(Dummy_ClientStreamPingServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamPing not implemented")
}
func (UnimplementedDummyServer) mustEmbedUnimplementedDummyServer() {}

// UnsafeDummyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyServer will
// result in compilation errors.
type UnsafeDummyServer interface {
	mustEmbedUnimplementedDummyServer()
}

func RegisterDummyServer(s grpc.ServiceRegistrar, srv DummyServer) {
	s.RegisterService(&Dummy_ServiceDesc, srv)
}

func _Dummy_UnaryPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyServer).UnaryPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Dummy/UnaryPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyServer).UnaryPing(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummy_ServerStreamPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DummyServer).ServerStreamPing(m, &dummyServerStreamPingServer{stream})
}

type Dummy_ServerStreamPingServer interface {
	Send(*Void) error
	grpc.ServerStream
}

type dummyServerStreamPingServer struct {
	grpc.ServerStream
}

func (x *dummyServerStreamPingServer) Send(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func _Dummy_ClientStreamPing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DummyServer).ClientStreamPing(&dummyClientStreamPingServer{stream})
}

type Dummy_ClientStreamPingServer interface {
	SendAndClose(*Void) error
	Recv() (*Void, error)
	grpc.ServerStream
}

type dummyClientStreamPingServer struct {
	grpc.ServerStream
}

func (x *dummyClientStreamPingServer) SendAndClose(m *Void) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dummyClientStreamPingServer) Recv() (*Void, error) {
	m := new(Void)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Dummy_ServiceDesc is the grpc.ServiceDesc for Dummy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dummy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dummy",
	HandlerType: (*DummyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryPing",
			Handler:    _Dummy_UnaryPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamPing",
			Handler:       _Dummy_ServerStreamPing_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamPing",
			Handler:       _Dummy_ClientStreamPing_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/dummy.proto",
}
